{"ast":null,"code":"import _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/DataProvider.js\";\nimport React, { Component, createContext } from 'react';\nimport axios from \"axios\";\nimport sidebarData from \"./data/sidebarData\"; // import data from \"./data/LNS14000000.json\" //unemployment rate\n// import data from \"./data/CUUR0000SA0.json\"  //Consumer Price Index\n// import data from \"./data/CES0000000001.json\" //total nonfarm payroll\n// import data from \"./data/CUSR0000SA0.json\" //CPI % change index\n// import data from \"./data/LNS11300000.json\" //Labor Force Participation rate\n// import data from \"./data/CES3000000001.json\" //manufacturing employment\n// import data from \"./data/CES0500000003.json\"  //svg hrly earnings\n// import data from \"./data/PCUOMFG--OMFG--.json\"  //Producer Price index\n// import data from \"./data/CIU2010000000000A.json\" //total compensation % change\n// import data from \"./data/PRS84006092.json\"\n\nvar _createContext = createContext(),\n    Consumer = _createContext.Consumer,\n    Provider = _createContext.Provider; //set initial state\n\n\nexport { Consumer, Provider };\nvar initialState = {\n  seriesID: \"\",\n  data: [],\n  loading: true,\n  errMsg: null\n};\n\nvar DataProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataProvider, _Component);\n\n  function DataProvider() {\n    var _this;\n\n    _classCallCheck(this, DataProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataProvider).call(this));\n    _this.state = initialState; //bind prototype functions\n\n    _this.resetState = _this.resetState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getData = _this.getData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //need to revert state upon each button click\n\n\n  _createClass(DataProvider, [{\n    key: \"resetState\",\n    value: function resetState() {\n      this.setState(initialState);\n    } // getData(seriesID){\n    //     return(\n    //         this.setState({\n    //             series: seriesID,\n    //             data: data.Results.series[0].data,\n    //             loading: false,\n    //             errMsg: false\n    //         })\n    //     )\n    // } //end fake get data\n\n  }, {\n    key: \"getData\",\n    value: function getData(seriesID, timeParam) {\n      var _this2 = this;\n\n      var currentYear = new Date().getFullYear();\n      var startYear = currentYear - timeParam;\n      return axios({\n        method: \"post\",\n        url: \"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data: {\n          seriesid: seriesID,\n          startyear: startYear.toString,\n          endyear: currentYear.toString,\n          catalog: false,\n          calculations: false,\n          annualaverage: false,\n          registrationkey: \"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n      }).then(function (response) {\n        return _this2.setState({\n          series: seriesID,\n          data: response.data.Results.series[0].data,\n          loading: false,\n          errMsg: false,\n          title: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).title,\n          subtitle: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).subtitle,\n          description: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).description\n        });\n      }).catch(function (errMsg) {\n        return _this2.setState({\n          loading: false,\n          errMsg: \"Cannot get data\"\n        });\n      });\n    } //end real get data\n\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(button, timeParam) {\n      console.log(button, timeParam); ///make get data call with series ID, send state down to chart\n\n      button.series_id ? this.getData(button.series_id, 3) : this.getData(button, timeParam);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(\"*****\" + JSON.stringify(this.state));\n      var chartContext = {\n        data: this.state.data,\n        getDataInfo: this.handleClick,\n        title: this.state.title,\n        subtitle: this.state.subtitle,\n        description: this.state.description,\n        loading: this.state.loading,\n        errMsg: this.state.errMsg\n      };\n      return React.createElement(Provider, {\n        value: chartContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return DataProvider;\n}(Component);\n\nexport { DataProvider as default };\nexport var withChartContext = function withChartContext(C) {\n  return function (Cprops) {\n    return React.createElement(Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, function (value) {\n      return React.createElement(C, Object.assign({}, value, Cprops, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }));\n    });\n  };\n}; /// not fully working BLS code\n\n/*\ngetData(seriesID){\n        this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n        return axios({\n            method:\"post\",\n            url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n            data:{\n                seriesid:[seriesID],\n                catalog:false, \n                calculations:false, \n                annualaverage:false,\n                registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n            }\n        \n        })\n            .then( response =>\n                 \n                this.setState({\n                    series: seriesID,\n                    data: response.data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false,\n                    title: sidebarData.find(chart => ( chart.series_id === seriesID)).title,\n                    subtitle: sidebarData.find(chart => ( chart.series_id === seriesID)).subtitle,\n                    description: sidebarData.find(chart => ( chart.series_id === seriesID)).description,\n\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n*/\n\n/*\ngetData(seriesID){\n    // this.resetState();\n    //placeholder for now until working, will switch out for seriesID once running\n    // let id = this.seriesID\n    // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n    return axios({\n        method:\"post\",\n        url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data:{\n            seriesid:[seriesID],\n            catalog:false, \n            calculations:false, \n            annualaverage:false,\n            registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n\n    })\n        .then( response => \n            this.setState({\n                series: seriesID,\n                data: response.data.Results.series[0].data.value,\n                loading: false,\n                errMsg: false\n            }))\n        .catch( errMsg => \n            this.setState({\n               loading:false,\n               errMsg:\"Cannot get data\"     \n        }))\n\n    \n\n}\n\ngetData(seriesID){\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        return axios.get(\"https://swapi.co/api/people/\")\n            .then( response => \n                this.setState({\n                    series: seriesID,\n                    data: data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n\n        \n\n    }\n\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        // return axios.get(\"https://swapi.co/api/people/\")\n        //     .then( response => \n        //         this.setState({\n        //             series: seriesID,\n        //             data: data.Results.series[0].data,\n        //             loading: false,\n        //             errMsg: false\n        //         }))\n        //     .catch( errMsg => \n        //         this.setState({\n        //            loading:false,\n        //            errMsg:\"Cannot get data\"     \n        //     }))\n\n\n*/","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/DataProvider.js"],"names":["React","Component","createContext","axios","sidebarData","Consumer","Provider","initialState","seriesID","data","loading","errMsg","DataProvider","state","resetState","bind","getData","handleClick","setState","timeParam","currentYear","Date","getFullYear","startYear","method","url","seriesid","startyear","toString","endyear","catalog","calculations","annualaverage","registrationkey","then","response","series","Results","title","find","chart","series_id","subtitle","description","catch","button","console","log","JSON","stringify","chartContext","getDataInfo","props","children","withChartContext","C","Cprops","value"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,oBAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;qBAEoCF,aAAa,E;IAAnCG,Q,kBAAAA,Q;IAAUC,Q,kBAAAA,Q,EAGxB;;;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAC,EADQ;AAEjBC,EAAAA,IAAI,EAAC,EAFY;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,MAAM,EAAE;AAJS,CAArB;;IAOqBC,Y;;;;;AACjB,0BAAa;AAAA;;AAAA;;AACT;AACA,UAAKC,KAAL,GAAaN,YAAb,CAFS,CAIT;;AACA,UAAKO,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,uDAAlB;AACA,UAAKC,OAAL,GAAe,MAAKA,OAAL,CAAaD,IAAb,uDAAf;AACA,UAAKE,WAAL,GAAmB,MAAKA,WAAL,CAAiBF,IAAjB,uDAAnB;AAPS;AAQZ,G,CAED;;;;;iCACY;AACR,WAAKG,QAAL,CAAcX,YAAd;AACH,K,CAGD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;4BAEQC,Q,EAAUW,S,EAAU;AAAA;;AACxB,UAAIC,WAAW,GAAI,IAAIC,IAAJ,EAAD,CAAaC,WAAb,EAAlB;AACA,UAAIC,SAAS,GAAGH,WAAW,GAAGD,SAA9B;AACA,aAAOhB,KAAK,CAAC;AACTqB,QAAAA,MAAM,EAAC,MADE;AAETC,QAAAA,GAAG,EAAC,mDAFK;AAGThB,QAAAA,IAAI,EAAC;AACDiB,UAAAA,QAAQ,EAAClB,QADR;AAEDmB,UAAAA,SAAS,EAACJ,SAAS,CAACK,QAFnB;AAGDC,UAAAA,OAAO,EAAET,WAAW,CAACQ,QAHpB;AAIDE,UAAAA,OAAO,EAAC,KAJP;AAKDC,UAAAA,YAAY,EAAC,KALZ;AAMDC,UAAAA,aAAa,EAAC,KANb;AAODC,UAAAA,eAAe,EAAC;AAPf;AAHI,OAAD,CAAL,CAcFC,IAdE,CAcI,UAAAC,QAAQ;AAAA,eACX,MAAI,CAACjB,QAAL,CAAc;AACVkB,UAAAA,MAAM,EAAE5B,QADE;AAEVC,UAAAA,IAAI,EAAE0B,QAAQ,CAAC1B,IAAT,CAAc4B,OAAd,CAAsBD,MAAtB,CAA6B,CAA7B,EAAgC3B,IAF5B;AAGVC,UAAAA,OAAO,EAAE,KAHC;AAIVC,UAAAA,MAAM,EAAE,KAJE;AAKV2B,UAAAA,KAAK,EAAElC,WAAW,CAACmC,IAAZ,CAAiB,UAAAC,KAAK;AAAA,mBAAMA,KAAK,CAACC,SAAN,KAAoBjC,QAA1B;AAAA,WAAtB,EAA2D8B,KALxD;AAMVI,UAAAA,QAAQ,EAAEtC,WAAW,CAACmC,IAAZ,CAAiB,UAAAC,KAAK;AAAA,mBAAMA,KAAK,CAACC,SAAN,KAAoBjC,QAA1B;AAAA,WAAtB,EAA2DkC,QAN3D;AAOVC,UAAAA,WAAW,EAAEvC,WAAW,CAACmC,IAAZ,CAAiB,UAAAC,KAAK;AAAA,mBAAMA,KAAK,CAACC,SAAN,KAAoBjC,QAA1B;AAAA,WAAtB,EAA2DmC;AAP9D,SAAd,CADW;AAAA,OAdZ,EA0BFC,KA1BE,CA0BK,UAAAjC,MAAM;AAAA,eACV,MAAI,CAACO,QAAL,CAAc;AACXR,UAAAA,OAAO,EAAC,KADG;AAEXC,UAAAA,MAAM,EAAC;AAFI,SAAd,CADU;AAAA,OA1BX,CAAP;AAiCH,K,CAAA;;;;gCAQWkC,M,EAAQ1B,S,EAAU;AAC1B2B,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAAoB1B,SAApB,EAD0B,CAE1B;;AAEA0B,MAAAA,MAAM,CAACJ,SAAP,GAAmB,KAAKzB,OAAL,CAAa6B,MAAM,CAACJ,SAApB,EAA+B,CAA/B,CAAnB,GAAuD,KAAKzB,OAAL,CAAa6B,MAAb,EAAqB1B,SAArB,CAAvD;AAEH;;;6BAEQ;AACL2B,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAQC,IAAI,CAACC,SAAL,CAAe,KAAKpC,KAApB,CAApB;AACA,UAAMqC,YAAY,GAAG;AAEjBzC,QAAAA,IAAI,EAAE,KAAKI,KAAL,CAAWJ,IAFA;AAGjB0C,QAAAA,WAAW,EAAE,KAAKlC,WAHD;AAIjBqB,QAAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWyB,KAJD;AAKjBI,QAAAA,QAAQ,EAAE,KAAK7B,KAAL,CAAW6B,QALJ;AAMjBC,QAAAA,WAAW,EAAE,KAAK9B,KAAL,CAAW8B,WANP;AAOjBjC,QAAAA,OAAO,EAAE,KAAKG,KAAL,CAAWH,OAPH;AAQjBC,QAAAA,MAAM,EAAE,KAAKE,KAAL,CAAWF;AARF,OAArB;AAWA,aACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAEuC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKE,KAAL,CAAWC,QADhB,CADJ;AAKH;;;;EApGqCpD,S;;SAArBW,Y;AAuGrB,OAAO,IAAM0C,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAC,CAAC;AAAA,SAAI,UAAAC,MAAM;AAAA,WACvC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,UAAAC,KAAK;AAAA,aAAI,oBAAC,CAAD,oBAAOA,KAAP,EAAiBD,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KADV,CADuC;AAAA,GAAV;AAAA,CAA1B,C,CAOP;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA","sourcesContent":["import React, { Component, createContext } from 'react'\nimport axios from \"axios\"\nimport sidebarData from \"./data/sidebarData\"\n\n// import data from \"./data/LNS14000000.json\" //unemployment rate\n// import data from \"./data/CUUR0000SA0.json\"  //Consumer Price Index\n// import data from \"./data/CES0000000001.json\" //total nonfarm payroll\n// import data from \"./data/CUSR0000SA0.json\" //CPI % change index\n// import data from \"./data/LNS11300000.json\" //Labor Force Participation rate\n// import data from \"./data/CES3000000001.json\" //manufacturing employment\n// import data from \"./data/CES0500000003.json\"  //svg hrly earnings\n// import data from \"./data/PCUOMFG--OMFG--.json\"  //Producer Price index\n// import data from \"./data/CIU2010000000000A.json\" //total compensation % change\n// import data from \"./data/PRS84006092.json\"\n\nexport const {Consumer, Provider} = createContext()\n\n\n//set initial state\nconst initialState = {\n    seriesID:\"\",\n    data:[],\n    loading: true,\n    errMsg: null,\n}\n\nexport default class DataProvider extends Component {\n    constructor(){\n        super();\n        this.state = initialState\n\n        //bind prototype functions\n        this.resetState = this.resetState.bind(this)\n        this.getData = this.getData.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    //need to revert state upon each button click\n    resetState(){\n        this.setState(initialState)\n    }\n\n    \n    // getData(seriesID){\n\n    //     return(\n    //         this.setState({\n    //             series: seriesID,\n    //             data: data.Results.series[0].data,\n    //             loading: false,\n    //             errMsg: false\n    //         })\n    //     )\n \n    // } //end fake get data\n\n    getData(seriesID, timeParam){\n        let currentYear = (new Date()).getFullYear()\n        let startYear = currentYear - timeParam\n        return axios({\n            method:\"post\",\n            url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n            data:{\n                seriesid:seriesID,\n                startyear:startYear.toString,\n                endyear: currentYear.toString,\n                catalog:false, \n                calculations:false, \n                annualaverage:false,\n                registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n            }\n    \n        })\n            .then( response => \n                this.setState({\n                    series: seriesID,\n                    data: response.data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false,\n                    title: sidebarData.find(chart => ( chart.series_id === seriesID)).title,\n                    subtitle: sidebarData.find(chart => ( chart.series_id === seriesID)).subtitle,\n                    description: sidebarData.find(chart => ( chart.series_id === seriesID)).description\n\n\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n    \n        \n    }//end real get data\n    \n\n    \n    \n\n\n\n    handleClick(button, timeParam){\n        console.log(button, timeParam)\n        ///make get data call with series ID, send state down to chart\n\n        button.series_id ? this.getData(button.series_id, 3) : this.getData(button, timeParam)\n        \n    }\n\n    render() {       \n        console.log(\"*****\"+JSON.stringify(this.state))\n        const chartContext = {\n           \n            data: this.state.data,\n            getDataInfo: this.handleClick,\n            title: this.state.title,\n            subtitle: this.state.subtitle,\n            description: this.state.description,\n            loading: this.state.loading,\n            errMsg: this.state.errMsg\n        }\n\n        return (\n            <Provider value={chartContext}>\n                {this.props.children}\n            </Provider>\n        )\n    }\n}\n\nexport const withChartContext = C => Cprops => (\n    <Consumer>\n        {value => <C {...value}{...Cprops} />}\n    </Consumer>\n)\n\n\n/// not fully working BLS code\n\n\n/*\ngetData(seriesID){\n        this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n        return axios({\n            method:\"post\",\n            url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n            data:{\n                seriesid:[seriesID],\n                catalog:false, \n                calculations:false, \n                annualaverage:false,\n                registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n            }\n        \n        })\n            .then( response =>\n                 \n                this.setState({\n                    series: seriesID,\n                    data: response.data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false,\n                    title: sidebarData.find(chart => ( chart.series_id === seriesID)).title,\n                    subtitle: sidebarData.find(chart => ( chart.series_id === seriesID)).subtitle,\n                    description: sidebarData.find(chart => ( chart.series_id === seriesID)).description,\n\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n*/\n\n\n\n\n\n/*\ngetData(seriesID){\n    // this.resetState();\n    //placeholder for now until working, will switch out for seriesID once running\n    // let id = this.seriesID\n    // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n    return axios({\n        method:\"post\",\n        url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data:{\n            seriesid:[seriesID],\n            catalog:false, \n            calculations:false, \n            annualaverage:false,\n            registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n\n    })\n        .then( response => \n            this.setState({\n                series: seriesID,\n                data: response.data.Results.series[0].data.value,\n                loading: false,\n                errMsg: false\n            }))\n        .catch( errMsg => \n            this.setState({\n               loading:false,\n               errMsg:\"Cannot get data\"     \n        }))\n\n    \n\n}\n\ngetData(seriesID){\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        return axios.get(\"https://swapi.co/api/people/\")\n            .then( response => \n                this.setState({\n                    series: seriesID,\n                    data: data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n\n        \n\n    }\n\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        // return axios.get(\"https://swapi.co/api/people/\")\n        //     .then( response => \n        //         this.setState({\n        //             series: seriesID,\n        //             data: data.Results.series[0].data,\n        //             loading: false,\n        //             errMsg: false\n        //         }))\n        //     .catch( errMsg => \n        //         this.setState({\n        //            loading:false,\n        //            errMsg:\"Cannot get data\"     \n        //     }))\n\n\n*/"]},"metadata":{},"sourceType":"module"}