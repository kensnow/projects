{"ast":null,"code":"import _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/Chart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { withChartContext } from \"./DataProvider\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  //need helper functions to parse data & determine chart type\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      width: 0,\n      height: 0,\n      data: props\n    };\n    _this.createBarChart = _this.createBarChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createBarChart();\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.createBarChart();\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      this.setState({\n        width: document.getElementById('chart').clientWidth,\n        height: document.getElementById('chart').clientHeight\n      });\n    }\n  }, {\n    key: \"createBarChart\",\n    value: function createBarChart() {\n      var node = this.node;\n      var dataObj = this.props.data;\n      var valuesMap = dataObj.map(function (d) {\n        return d.value;\n      });\n      var dataMax = d3.max(dataObj, function (d) {\n        return d.value;\n      });\n      var dataMin = d3.min(dataObj, function (d) {\n        return d.value;\n      }); //parameters\n\n      var height = this.state.height;\n      var width = this.state.width;\n      var barWidth = 30;\n      var barOffset = 5; //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n      // percent change charts\n\n      var yScale = d3.scaleLinear().domain([0, dataMax]).range([0, height]);\n      var xScale = d3.scaleBand().domain(valuesMap).padding(.1).range([0, width]); //dynamically change bar colors based on size\n\n      var colors = d3.scaleLinear().domain([0, dataMax]).range(['#FFB832', '#C61C6F']); //*****\n      // const x_axis = d3.axisBottom()\n      //     .scale(yScale)\n      //     .append(\"rect\")\n\n      var myChart = d3.select(node).attr('width', width).attr('height', height).selectAll('rect').data(valuesMap).enter().append('rect').attr(\"fill\", function (d) {\n        return colors(d);\n      }).attr(\"width\", function (d) {\n        return xScale.bandwidth();\n      }).attr('height', 0) //.attr(\"height\", (d) => yScale(d))\n      .attr(\"x\", function (d) {\n        return xScale(d);\n      }) //spread bars out using width and offset\n      .attr('y', height); //.attr(\"y\", d => height - yScale(d)) //position bars at bottom\n\n      myChart.transition().attr(\"height\", function (d) {\n        return yScale(d);\n      }).attr(\"y\", function (d) {\n        return height - yScale(d);\n      }).delay(function (d, i) {\n        return i * 10;\n      }).duration(1000).ease(d3.easeBackOut);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"chart-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, this.props.title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.props.subtitle), React.createElement(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: function ref(node) {\n          return _this2.node = node;\n        },\n        width: this.state.width,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default withChartContext(Chart);","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/Chart.js"],"names":["React","Component","d3","withChartContext","Chart","props","state","width","height","data","createBarChart","bind","updateWindowDimensions","window","addEventListener","setState","document","getElementById","clientWidth","clientHeight","node","dataObj","valuesMap","map","d","value","dataMax","max","dataMin","min","barWidth","barOffset","yScale","scaleLinear","domain","range","xScale","scaleBand","padding","colors","myChart","select","attr","selectAll","enter","append","bandwidth","transition","delay","i","duration","ease","easeBackOut","title","subtitle"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AAEA,SAAQC,gBAAR,QAA+B,gBAA/B;;IAEMC,K;;;;;AACF;AACA,iBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAC,CAAlB;AAAqBC,MAAAA,IAAI,EAACJ;AAA1B,KAAb;AACA,UAAKK,cAAL,GAAsB,MAAKA,cAAL,CAAoBC,IAApB,uDAAtB;AACA,UAAKC,sBAAL,GAA8B,MAAKA,sBAAL,CAA4BD,IAA5B,uDAA9B;AAJc;AAKjB;;;;wCAEkB;AACf,WAAKD,cAAL;AACA,WAAKE,sBAAL;AACAC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKF,sBAAvC;AACH;;;yCACmB;AAChB,WAAKF,cAAL;AACH;;;6CAEuB;AACpB,WAAKK,QAAL,CAAc;AACVR,QAAAA,KAAK,EAAES,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCC,WAD9B;AAEVV,QAAAA,MAAM,EAAEQ,QAAQ,CAACC,cAAT,CAAwB,OAAxB,EAAiCE;AAF/B,OAAd;AAIH;;;qCACe;AACZ,UAAMC,IAAI,GAAG,KAAKA,IAAlB;AACA,UAAMC,OAAO,GAAG,KAAKhB,KAAL,CAAWI,IAA3B;AAEA,UAAMa,SAAS,GAAGD,OAAO,CAACE,GAAR,CAAY,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,KAAN;AAAA,OAAb,CAAlB;AAEA,UAAMC,OAAO,GAAGxB,EAAE,CAACyB,GAAH,CAAON,OAAP,EAAgB,UAACG,CAAD,EAAO;AAAC,eAAOA,CAAC,CAACC,KAAT;AAAe,OAAvC,CAAhB;AACA,UAAMG,OAAO,GAAG1B,EAAE,CAAC2B,GAAH,CAAOR,OAAP,EAAgB,UAACG,CAAD,EAAO;AAAC,eAAOA,CAAC,CAACC,KAAT;AAAe,OAAvC,CAAhB,CAPY,CASZ;;AACA,UAAMjB,MAAM,GAAG,KAAKF,KAAL,CAAWE,MAA1B;AACA,UAAMD,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAzB;AACA,UAAMuB,QAAQ,GAAG,EAAjB;AACA,UAAMC,SAAS,GAAG,CAAlB,CAbY,CAeZ;AACA;;AACA,UAAMC,MAAM,GAAG9B,EAAE,CAAC+B,WAAH,GACVC,MADU,CACH,CAAC,CAAD,EAAIR,OAAJ,CADG,EAEVS,KAFU,CAEJ,CAAC,CAAD,EAAI3B,MAAJ,CAFI,CAAf;AAIA,UAAM4B,MAAM,GAAGlC,EAAE,CAACmC,SAAH,GACVH,MADU,CACHZ,SADG,EAEVgB,OAFU,CAEF,EAFE,EAGVH,KAHU,CAGJ,CAAC,CAAD,EAAI5B,KAAJ,CAHI,CAAf,CArBY,CA0BZ;;AACA,UAAMgC,MAAM,GAAGrC,EAAE,CAAC+B,WAAH,GACVC,MADU,CACH,CAAC,CAAD,EAAIR,OAAJ,CADG,EAEVS,KAFU,CAEJ,CAAC,SAAD,EAAW,SAAX,CAFI,CAAf,CA3BY,CA8BZ;AACA;AACA;AACA;;AAEA,UAAMK,OAAO,GAAGtC,EAAE,CAACuC,MAAH,CAAUrB,IAAV,EACXsB,IADW,CACN,OADM,EACGnC,KADH,EAEXmC,IAFW,CAEN,QAFM,EAEIlC,MAFJ,EAIfmC,SAJe,CAIL,MAJK,EAKXlC,IALW,CAKNa,SALM,EAMXsB,KANW,GAMHC,MANG,CAMI,MANJ,EAOXH,IAPW,CAON,MAPM,EAOE,UAAClB,CAAD;AAAA,eAAOe,MAAM,CAACf,CAAD,CAAb;AAAA,OAPF,EAQXkB,IARW,CAQN,OARM,EAQG,UAAClB,CAAD;AAAA,eAAOY,MAAM,CAACU,SAAP,EAAP;AAAA,OARH,EASXJ,IATW,CASN,QATM,EASI,CATJ,EAUZ;AAVY,OAWXA,IAXW,CAWN,GAXM,EAWD,UAAClB,CAAD;AAAA,eAAOY,MAAM,CAACZ,CAAD,CAAb;AAAA,OAXC,EAWiB;AAXjB,OAYXkB,IAZW,CAYN,GAZM,EAYDlC,MAZC,CAAhB,CAnCY,CAgDR;;AAEJgC,MAAAA,OAAO,CAACO,UAAR,GACKL,IADL,CACU,QADV,EACoB,UAAClB,CAAD;AAAA,eAAOQ,MAAM,CAACR,CAAD,CAAb;AAAA,OADpB,EAEKkB,IAFL,CAEU,GAFV,EAEe,UAAAlB,CAAC;AAAA,eAAIhB,MAAM,GAAGwB,MAAM,CAACR,CAAD,CAAnB;AAAA,OAFhB,EAGKwB,KAHL,CAGW,UAACxB,CAAD,EAAGyB,CAAH;AAAA,eAASA,CAAC,GAAG,EAAb;AAAA,OAHX,EAIKC,QAJL,CAIc,IAJd,EAKKC,IALL,CAKUjD,EAAE,CAACkD,WALb;AAMH;;;6BAEO;AAAA;;AACJ,aAEQ;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAK/C,KAAL,CAAWgD,KAAhB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKhD,KAAL,CAAWiD,QAAhB,CAFJ,EAGI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,EAAE,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAE,aAAAlC,IAAI;AAAA,iBAAI,MAAI,CAACA,IAAL,GAAYA,IAAhB;AAAA,SAAd;AAAoC,QAAA,KAAK,EAAE,KAAKd,KAAL,CAAWC,KAAtD;AAA6D,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,MAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAHJ,CAFR;AAWH;;;;EA9FeP,S;;AAiGpB,eAAeE,gBAAgB,CAACC,KAAD,CAA/B","sourcesContent":["import React, {Component} from 'react'\n\nimport * as d3 from \"d3\"\n\nimport {withChartContext} from \"./DataProvider\"\n\nclass Chart extends Component{\n    //need helper functions to parse data & determine chart type\n    constructor(props){\n        super(props);\n        this.state = {width: 0, height:0, data:props}\n        this.createBarChart = this.createBarChart.bind(this)\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\n    }\n\n    componentDidMount(){\n        this.createBarChart()\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions)\n    }\n    componentDidUpdate(){\n        this.createBarChart()\n    }\n\n    updateWindowDimensions(){\n        this.setState({\n            width: document.getElementById('chart').clientWidth,\n            height: document.getElementById('chart').clientHeight\n        })\n    }\n    createBarChart(){\n        const node = this.node\n        const dataObj = this.props.data\n        \n        const valuesMap = dataObj.map(d => d.value)\n\n        const dataMax = d3.max(dataObj, (d) => {return d.value})\n        const dataMin = d3.min(dataObj, (d) => {return d.value})\n        \n        //parameters\n        const height = this.state.height\n        const width = this.state.width\n        const barWidth = 30\n        const barOffset = 5\n\n        //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n        // percent change charts\n        const yScale = d3.scaleLinear()\n            .domain([0, dataMax])\n            .range([0, height])\n\n        const xScale = d3.scaleBand()\n            .domain(valuesMap)\n            .padding(.1)\n            .range([0, width])\n        \n        //dynamically change bar colors based on size\n        const colors = d3.scaleLinear()\n            .domain([0, dataMax])\n            .range(['#FFB832','#C61C6F'])\n        //*****\n        // const x_axis = d3.axisBottom()\n        //     .scale(yScale)\n        //     .append(\"rect\")\n\n        const myChart = d3.select(node)\n            .attr('width', width)\n            .attr('height', height)\n            \n        .selectAll('rect')\n            .data(valuesMap)\n            .enter().append('rect')\n            .attr(\"fill\", (d) => colors(d))\n            .attr(\"width\", (d) => xScale.bandwidth())\n            .attr('height', 0)\n            //.attr(\"height\", (d) => yScale(d))\n            .attr(\"x\", (d) => xScale(d)) //spread bars out using width and offset\n            .attr('y', height)\n            //.attr(\"y\", d => height - yScale(d)) //position bars at bottom\n        \n        myChart.transition()\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"y\", d => height - yScale(d))\n            .delay((d,i) => i * 10)\n            .duration(1000)\n            .ease(d3.easeBackOut)\n    }\n\n    render(){\n        return (\n                   \n                <div className=\"chart-wrapper\">\n                    <h3>{this.props.title}</h3>\n                    <h5>{this.props.subtitle}</h5>\n                    <div className=\"chart\" id=\"chart\">\n                        <svg ref={node => this.node = node} width={this.state.width} height={this.state.height}></svg>\n                    </div>\n                </div>\n\n        )\n    }\n}\n\nexport default withChartContext(Chart)\n"]},"metadata":{},"sourceType":"module"}