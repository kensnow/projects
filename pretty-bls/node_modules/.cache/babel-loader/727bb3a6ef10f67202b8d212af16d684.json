{"ast":null,"code":"import _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/Chart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { withChartContext } from \"./DataProvider\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  //need helper functions to parse data & determine chart type\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      width: 0,\n      height: 0,\n      data: props\n    };\n    _this.createBarChart = _this.createBarChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createBarChart();\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.createBarChart();\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      this.setState({\n        width: document.getElementById('chart').clientWidth,\n        //get width from container\n        height: document.getElementById('chart').clientHeight\n      });\n    }\n  }, {\n    key: \"createBarChart\",\n    value: function createBarChart() {\n      var _this2 = this;\n\n      d3.selectAll(\"svg > *\").remove(); //clear previous chart\n\n      return new Promise(function (rej, res) {\n        var node = _this2.node;\n        var dataObj = _this2.props.data;\n        var valuesMap = dataObj.map(function (d) {\n          return +d.value;\n        }); //get an array of data called valuesMap\n        // console.log(valuesMap)\n\n        var freqMap = dataObj.map(function (d) {\n          var months = new Array(12);\n          months[0] = \"January\";\n          months[1] = \"February\";\n          months[2] = \"March\";\n          months[3] = \"April\";\n          months[4] = \"May\";\n          months[5] = \"June\";\n          months[6] = \"July\";\n          months[7] = \"August\";\n          months[8] = \"September\";\n          months[9] = \"October\";\n          months[10] = \"November\";\n          months[11] = \"December\";\n          return new Date(d.year, months.indexOf(d.periodName));\n        });\n        valuesMap.reverse(); //fix data series from BLS so chart reads left to right\n\n        freqMap.reverse(); //fix data series from BLS\n        // const dataMax = d3.max(dataObj, (d) => { return d.value })\n        // const dataMin = d3.min(dataObj, (d) => { return d.value })\n\n        var dataMax = d3.max(valuesMap);\n        var dataMin = d3.min(valuesMap); //parameters\n\n        var margin = {\n          top: 20,\n          right: 20,\n          bottom: 20,\n          left: 40\n        };\n        var height = _this2.state.height - margin.top - margin.bottom;\n        var width = _this2.state.width - margin.left - margin.right;\n        var barWidth = 30;\n        var barOffset = 5; //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n        // percent change charts\n\n        var yScale = d3.scaleLinear().domain([dataMin, dataMax]).range([dataMin, height]);\n        var yAxisValues = d3.scaleLinear().domain([dataMin, dataMax]).range([height, 0]); //need to reverse to correct scale drawing\n\n        var yAxisTicks = d3.axisLeft(yAxisValues).ticks(20);\n        var xScale = d3.scaleBand().domain(valuesMap).padding(.1).range([0, width]);\n        var xAxisValues = d3.scaleTime() // .domain([freqMap[0],freqMap[freqMap.length-1]])\n        .domain([freqMap[0], freqMap[freqMap.length - 1]]).range([0, width]);\n        var xAxisTicks = d3.axisBottom(xAxisValues).ticks(12); //dynamically change bar colors based on size\n\n        var colors = d3.scaleLinear().domain([dataMin, dataMax]).range(['#341C1C', '#ADFCF9']); //*****\n        // const x_axis = d3.axisBottom()\n        //     .scale(yScale)\n        //     .append(\"rect\")\n\n        var myChart = d3.select(node).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom) // .append('g')\n        .selectAll('rect').data(valuesMap).enter().append('rect').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.right, \")\")).attr(\"fill\", function (d) {\n          return colors(d);\n        }).attr(\"width\", function (d) {\n          return xScale.bandwidth();\n        }) // calculate width of each bar\n        // .attr('height', 0)\n        .attr(\"height\", function (d) {\n          return yScale(d);\n        }).attr(\"x\", function (d) {\n          return xScale(d);\n        }) //spread bars out using width and offset\n        .attr('y', height); //.attr(\"y\", d => height - yScale(d)) //position bars at bottom\n\n        var yGuide = d3.select(node).append('g').attr('transform', 'translate(40,20)').call(yAxisTicks);\n        var xGuide = d3.select(node).append('g').attr('transform', \"translate(15,\".concat(height + 20, \")\")).call(xAxisTicks);\n        myChart.transition().attr(\"height\", function (d) {\n          return yScale(d);\n        }).attr(\"y\", function (d) {\n          return height - yScale(d);\n        }).delay(function (d, i) {\n          return i * 10;\n        }).duration(1000).ease(d3.easeBackInOut);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"chart-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, this.props.title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, this.props.subtitle), React.createElement(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: function ref(node) {\n          return _this3.node = node;\n        },\n        width: this.state.width,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default withChartContext(Chart);","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/Chart.js"],"names":["React","Component","d3","withChartContext","Chart","props","state","width","height","data","createBarChart","bind","updateWindowDimensions","window","addEventListener","setState","document","getElementById","clientWidth","clientHeight","selectAll","remove","Promise","rej","res","node","dataObj","valuesMap","map","d","value","freqMap","months","Array","Date","year","indexOf","periodName","reverse","dataMax","max","dataMin","min","margin","top","right","bottom","left","barWidth","barOffset","yScale","scaleLinear","domain","range","yAxisValues","yAxisTicks","axisLeft","ticks","xScale","scaleBand","padding","xAxisValues","scaleTime","length","xAxisTicks","axisBottom","colors","myChart","select","attr","enter","append","bandwidth","yGuide","call","xGuide","transition","delay","i","duration","ease","easeBackInOut","title","subtitle"],"mappings":"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","sourcesContent":[" import React, { Component } from 'react'\n\nimport * as d3 from \"d3\"\n\nimport { withChartContext } from \"./DataProvider\"\n\nclass Chart extends Component {\n    //need helper functions to parse data & determine chart type\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0, data: props }\n        this.createBarChart = this.createBarChart.bind(this)\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\n    }\n\n    componentDidMount() {\n        this.createBarChart()\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions)\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n\n    updateWindowDimensions() {\n        this.setState({\n            width: document.getElementById('chart').clientWidth, //get width from container\n            height: document.getElementById('chart').clientHeight\n        })\n    }\n    createBarChart() {\n        d3.selectAll(`svg > *`).remove() //clear previous chart\n        \n        return new Promise ((rej, res) => {\n        \n        const node = this.node\n\n        const dataObj = this.props.data\n\n        const valuesMap = dataObj.map(d => +d.value) //get an array of data called valuesMap\n       \n        // console.log(valuesMap)\n        const freqMap = dataObj.map(d => \n            {\n                var months = new Array(12);\n                    months[0] = \"January\";\n                    months[1] = \"February\";\n                    months[2] = \"March\";\n                    months[3] = \"April\";\n                    months[4] = \"May\";\n                    months[5] = \"June\";\n                    months[6] = \"July\";\n                    months[7] = \"August\";\n                    months[8] = \"September\";\n                    months[9] = \"October\";\n                    months[10] = \"November\";\n                    months[11] = \"December\";\n                return new Date(d.year, months.indexOf(d.periodName))\n            })\n        \n        valuesMap.reverse() //fix data series from BLS so chart reads left to right\n        freqMap.reverse() //fix data series from BLS\n        // const dataMax = d3.max(dataObj, (d) => { return d.value })\n        // const dataMin = d3.min(dataObj, (d) => { return d.value })\n        const dataMax = d3.max(valuesMap)\n        const dataMin = d3.min(valuesMap)\n        //parameters\n        const margin = {top: 20, right: 20, bottom: 20, left: 40}\n        const height = this.state.height - margin.top - margin.bottom\n        const width = this.state.width - margin.left - margin.right\n        \n        const barWidth = 30\n        const barOffset = 5\n\n        //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n        // percent change charts\n        const yScale = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range([dataMin, height])\n\n        const yAxisValues = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range([height,0]) //need to reverse to correct scale drawing\n\n        const yAxisTicks = d3.axisLeft(yAxisValues)\n            .ticks(20)\n\n        const xScale = d3.scaleBand()\n            .domain(valuesMap)\n            .padding(.1)\n            .range([0, width])\n        \n        \n\n        const xAxisValues = d3.scaleTime()\n            // .domain([freqMap[0],freqMap[freqMap.length-1]])\n            .domain([freqMap[0], freqMap[freqMap.length-1]])\n            .range([0, width])\n\n        const xAxisTicks = d3.axisBottom(xAxisValues)\n            .ticks(12)\n        \n        //dynamically change bar colors based on size\n        const colors = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range(['#341C1C', '#ADFCF9'])\n\n        //*****\n        // const x_axis = d3.axisBottom()\n        //     .scale(yScale)\n        //     .append(\"rect\")\n\n        \n\n        const myChart = d3.select(node)\n\n\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            \n            // .append('g')\n            \n          .selectAll('rect')\n            .data(valuesMap)\n            .enter().append('rect')\n\n            .attr('transform', `translate(${margin.left},${margin.right})`)\n            .attr(\"fill\", (d) => colors(d))\n            .attr(\"width\", (d) => xScale.bandwidth()) // calculate width of each bar\n            // .attr('height', 0)\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"x\", (d) => xScale(d)) //spread bars out using width and offset\n            .attr('y', height)\n     \n            //.attr(\"y\", d => height - yScale(d)) //position bars at bottom\n\n        const yGuide = d3.select(node).append('g')\n            .attr('transform', 'translate(40,20)')\n            .call(yAxisTicks)\n\n        const xGuide = d3.select(node).append('g')\n            .attr('transform', `translate(15,${height + 20})`)\n            .call(xAxisTicks)\n\n        myChart.transition()\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"y\", d => height - yScale(d))\n            .delay((d, i) => i * 10)\n            .duration(1000)\n            .ease(d3.easeBackInOut)\n        })    \n    }\n\n    render() {\n        return (\n\n            <div className=\"chart-wrapper\">\n                <h3>{this.props.title}</h3>\n                <h5>{this.props.subtitle}</h5>\n                <div className=\"chart\" id=\"chart\">\n                    <svg ref={node => this.node = node} width={this.state.width} height={this.state.height}></svg>\n                </div>\n            </div>\n\n        )\n    }\n}\n\nexport default withChartContext(Chart)\n"]},"metadata":{},"sourceType":"module"}