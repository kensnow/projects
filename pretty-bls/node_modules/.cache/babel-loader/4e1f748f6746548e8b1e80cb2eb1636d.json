{"ast":null,"code":"import _toConsumableArray from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n//{series_ID, freq, dataArr, title, subtitle, description}\nimport sidebarData from \"./data/sidebarData\";\nexport var parseData = function parseData(rawData, seriesId) {\n  console.log();\n  var chartMetaData = sidebarData.find(function (chart) {\n    return chart.series_id === seriesId;\n  });\n  console.log(chartMetaData);\n  var localData = {};\n  return rawData.reduce(function (acc, dataObj) {\n    return _objectSpread({}, dataObj, {\n      values: [].concat(_toConsumableArray(acc.values), [+dataObj.value]),\n      period: [].concat(_toConsumableArray(acc.period), [dataObj.period]),\n      periodName: [].concat(_toConsumableArray(acc.periodName), [dataObj.periodName]),\n      year: [].concat(_toConsumableArray(acc.year), [dataObj.year]) // add all other properties here\n\n    });\n  }, {\n    seriesId: seriesId,\n    values: [],\n    period: [],\n    periodName: [],\n    year: [] // add properites you want to track as empty arrays\n\n  }); // const cleanData = {\n  //     series_ID: rawData.seriesID,\n  //     freq: freq\n  // }\n};\nexport var drawChart = function drawChart(parsedData, type) {\n  var chart = parsedData;\n  return chart;\n};","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/helperFunctions.js"],"names":["sidebarData","parseData","rawData","seriesId","console","log","chartMetaData","find","chart","series_id","localData","reduce","acc","dataObj","values","value","period","periodName","year","drawChart","parsedData","type"],"mappings":";;AAAA;AACA,OAAOA,WAAP,MAAwB,oBAAxB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,OAAD,EAAUC,QAAV,EAAuB;AAC5CC,EAAAA,OAAO,CAACC,GAAR;AACA,MAAIC,aAAa,GAAGN,WAAW,CAACO,IAAZ,CAAiB,UAAAC,KAAK;AAAA,WAAMA,KAAK,CAACC,SAAN,KAAoBN,QAA1B;AAAA,GAAtB,CAApB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYC,aAAZ;AACA,MAAMI,SAAS,GAAG,EAAlB;AAID,SAAOR,OAAO,CAACS,MAAR,CAAe,UAACC,GAAD,EAAMC,OAAN;AAAA,6BACfA,OADe;AAEjBC,MAAAA,MAAM,+BAAMF,GAAG,CAACE,MAAV,IAAkB,CAACD,OAAO,CAACE,KAA3B,EAFW;AAGjBC,MAAAA,MAAM,+BAAMJ,GAAG,CAACI,MAAV,IAAkBH,OAAO,CAACG,MAA1B,EAHW;AAIjBC,MAAAA,UAAU,+BAAML,GAAG,CAACK,UAAV,IAAsBJ,OAAO,CAACI,UAA9B,EAJO;AAKjBC,MAAAA,IAAI,+BAAMN,GAAG,CAACM,IAAV,IAAgBL,OAAO,CAACK,IAAxB,EALa,CAMjB;;AANiB;AAAA,GAAf,EAOH;AACCf,IAAAA,QAAQ,EAARA,QADD;AAECW,IAAAA,MAAM,EAAE,EAFT;AAGCE,IAAAA,MAAM,EAAC,EAHR;AAICC,IAAAA,UAAU,EAAC,EAJZ;AAKCC,IAAAA,IAAI,EAAC,EALN,CAMC;;AAND,GAPG,CAAP,CAR6C,CAuB5C;AACA;AACA;AACA;AAEH,CA5BM;AA+BP,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD,EAAaC,IAAb,EAAsB;AAC3C,MAAMb,KAAK,GAAGY,UAAd;AACA,SAAQZ,KAAR;AACH,CAHM","sourcesContent":["//{series_ID, freq, dataArr, title, subtitle, description}\nimport sidebarData from \"./data/sidebarData\"\n\nexport const parseData = (rawData, seriesId) => {\n    console.log()\n    let chartMetaData = sidebarData.find(chart => ( chart.series_id === seriesId))\n    console.log(chartMetaData)\n    const localData = {\n        \n    }\n\n   return rawData.reduce((acc, dataObj) => ({\n       ...dataObj,\n        values: [...acc.values, +dataObj.value],\n        period: [...acc.period, dataObj.period],\n        periodName: [...acc.periodName, dataObj.periodName],\n        year: [...acc.year, dataObj.year]\n        // add all other properties here\n    }),{\n        seriesId,\n        values: [],\n        period:[],\n        periodName:[],\n        year:[]\n        // add properites you want to track as empty arrays\n    })\n    // const cleanData = {\n    //     series_ID: rawData.seriesID,\n    //     freq: freq\n    // }\n \n}\n\n\nexport const drawChart = (parsedData, type) => {\n    const chart = parsedData\n    return (chart)\n}"]},"metadata":{},"sourceType":"module"}