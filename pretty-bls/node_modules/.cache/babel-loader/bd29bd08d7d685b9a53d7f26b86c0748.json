{"ast":null,"code":"import _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/DataProvider.js\";\nimport React, { Component, createContext } from 'react';\nimport axios from \"axios\";\nimport data from \"./data/blsDataSample.json\";\nimport { parseData, drawChart } from \"./helperFunctions\";\nimport sidebarData from \"./data/sidebarData\";\n\nvar _createContext = createContext(),\n    Consumer = _createContext.Consumer,\n    Provider = _createContext.Provider; //set initial state\n\n\nexport { Consumer, Provider };\nvar initialState = {\n  seriesID: \"\",\n  data: [],\n  loading: true,\n  errMsg: null // blsApi: \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"\n  // const url = \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"\n  // const url = \"https://swapi.co/api/people/\"\n  // const seriesID = \"LNS14000000\" //placeholder until I get buttons working\n\n};\n\nvar DataProvider =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataProvider, _Component);\n\n  function DataProvider() {\n    var _this;\n\n    _classCallCheck(this, DataProvider);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataProvider).call(this));\n    _this.state = initialState; //bind prototype functions\n\n    _this.resetState = _this.resetState.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getData = _this.getData.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } //need to revert state upon each button click\n\n\n  _createClass(DataProvider, [{\n    key: \"resetState\",\n    value: function resetState() {\n      this.setState(initialState);\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(seriesID) {\n      var _this2 = this;\n\n      // this.resetState();\n      //placeholder for now until working, will switch out for seriesID once running\n      // let id = this.seriesID\n      // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n      return axios({\n        method: \"post\",\n        url: \"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data: {\n          seriesid: [seriesID],\n          catalog: false,\n          calculations: false,\n          annualaverage: false,\n          registrationkey: \"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n      }).then(function (response) {\n        return _this2.setState({\n          series: seriesID,\n          data: response.data.Results.series[0].data,\n          loading: false,\n          errMsg: false,\n          title: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).title,\n          subtitle: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).subtitle,\n          description: sidebarData.find(function (chart) {\n            return chart.series_id === seriesID;\n          }).description\n        });\n      }).catch(function (errMsg) {\n        return _this2.setState({\n          loading: false,\n          errMsg: \"Cannot get data\"\n        });\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick(button) {\n      ///make get data call with series ID, send state down to chart\n      this.getData(button.series_id); // this.getData(\"fakedata\")\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.state.data)\n      var cleanData = parseData(this.state.data, this.state.series);\n      var chartContext = {\n        data: cleanData,\n        getDataInfo: this.handleClick,\n        title: this.state.title,\n        subtitle: this.state\n      };\n      return React.createElement(Provider, {\n        value: chartContext,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.props.children);\n    }\n  }]);\n\n  return DataProvider;\n}(Component);\n\nexport { DataProvider as default };\nexport var withChartContext = function withChartContext(C) {\n  return function (Cprops) {\n    return React.createElement(Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, function (value) {\n      return React.createElement(C, Object.assign({}, value, Cprops, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }));\n    });\n  };\n}; /// not fully working BLS code\n\n/*\ngetData(seriesID){\n    // this.resetState();\n    //placeholder for now until working, will switch out for seriesID once running\n    // let id = this.seriesID\n    // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n    return axios({\n        method:\"post\",\n        url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data:{\n            seriesid:[seriesID],\n            catalog:false, \n            calculations:false, \n            annualaverage:false,\n            registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n\n    })\n        .then( response => \n            this.setState({\n                series: seriesID,\n                data: response.data.Results.series[0].data.value,\n                loading: false,\n                errMsg: false\n            }))\n        .catch( errMsg => \n            this.setState({\n               loading:false,\n               errMsg:\"Cannot get data\"     \n        }))\n\n    \n\n}\n\ngetData(seriesID){\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        return axios.get(\"https://swapi.co/api/people/\")\n            .then( response => \n                this.setState({\n                    series: seriesID,\n                    data: data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n\n        \n\n    }\n\n\n\n*/","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/DataProvider.js"],"names":["React","Component","createContext","axios","data","parseData","drawChart","sidebarData","Consumer","Provider","initialState","seriesID","loading","errMsg","DataProvider","state","resetState","bind","getData","handleClick","setState","method","url","seriesid","catalog","calculations","annualaverage","registrationkey","then","response","series","Results","title","find","chart","series_id","subtitle","description","catch","button","cleanData","chartContext","getDataInfo","props","children","withChartContext","C","Cprops","value"],"mappings":"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","sourcesContent":["import React, { Component, createContext } from 'react'\nimport axios from \"axios\"\n\nimport data from \"./data/blsDataSample.json\"\nimport {parseData, drawChart} from \"./helperFunctions\"\nimport sidebarData from \"./data/sidebarData\"\n\nexport const {Consumer, Provider} = createContext()\n\n\n//set initial state\nconst initialState = {\n    seriesID:\"\",\n    data:[],\n    loading: true,\n    errMsg: null,\n    // blsApi: \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"\n}\n\n// const url = \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"\n// const url = \"https://swapi.co/api/people/\"\n// const seriesID = \"LNS14000000\" //placeholder until I get buttons working\n\n\n\n\n\nexport default class DataProvider extends Component {\n    constructor(){\n        super();\n        this.state = initialState\n\n        //bind prototype functions\n        this.resetState = this.resetState.bind(this)\n        this.getData = this.getData.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    //need to revert state upon each button click\n    resetState(){\n        this.setState(initialState)\n    }\n\n    getData(seriesID){\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n        return axios({\n            method:\"post\",\n            url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n            data:{\n                seriesid:[seriesID],\n                catalog:false, \n                calculations:false, \n                annualaverage:false,\n                registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n            }\n        \n        })\n            .then( response =>\n                 \n                this.setState({\n                    series: seriesID,\n                    data: response.data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false,\n                    title: sidebarData.find(chart => ( chart.series_id === seriesID)).title,\n                    subtitle: sidebarData.find(chart => ( chart.series_id === seriesID)).subtitle,\n                    description: sidebarData.find(chart => ( chart.series_id === seriesID)).description,\n\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n    \n        \n    \n    }\n\n\n\n    handleClick(button){\n        \n        ///make get data call with series ID, send state down to chart\n        this.getData(button.series_id)\n        // this.getData(\"fakedata\")\n    }\n\n    render() {\n        // console.log(this.state.data)\n        const cleanData = parseData(this.state.data, this.state.series)\n\n        const chartContext = {\n            data: cleanData,\n            getDataInfo: this.handleClick,\n            title: this.state.title,\n            subtitle: this.state\n        }\n\n        return (\n            <Provider value={chartContext}>\n                {this.props.children}\n            </Provider>\n        )\n    }\n}\n\nexport const withChartContext = C => Cprops => (\n    <Consumer>\n        {value => <C {...value}{...Cprops} />}\n    </Consumer>\n)\n\n\n/// not fully working BLS code\n\n/*\ngetData(seriesID){\n    // this.resetState();\n    //placeholder for now until working, will switch out for seriesID once running\n    // let id = this.seriesID\n    // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n    return axios({\n        method:\"post\",\n        url:\"https://api.bls.gov/publicAPI/v2/timeseries/data/\",\n        data:{\n            seriesid:[seriesID],\n            catalog:false, \n            calculations:false, \n            annualaverage:false,\n            registrationkey:\"061d1f39d5ae46cdacdd66d4a26d23ea\"\n        }\n\n    })\n        .then( response => \n            this.setState({\n                series: seriesID,\n                data: response.data.Results.series[0].data.value,\n                loading: false,\n                errMsg: false\n            }))\n        .catch( errMsg => \n            this.setState({\n               loading:false,\n               errMsg:\"Cannot get data\"     \n        }))\n\n    \n\n}\n\ngetData(seriesID){\n        // this.resetState();\n        //placeholder for now until working, will switch out for seriesID once running\n        // let id = this.seriesID\n        // \"https://api.bls.gov/publicAPI/v2/timeseries/data/\"+seriesID\n\n        return axios.get(\"https://swapi.co/api/people/\")\n            .then( response => \n                this.setState({\n                    series: seriesID,\n                    data: data.Results.series[0].data,\n                    loading: false,\n                    errMsg: false\n                }))\n            .catch( errMsg => \n                this.setState({\n                   loading:false,\n                   errMsg:\"Cannot get data\"     \n            }))\n\n        \n\n    }\n\n\n\n*/"]},"metadata":{},"sourceType":"module"}