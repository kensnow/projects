{"ast":null,"code":"import _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/Chart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { withChartContext } from \"./DataProvider\";\nimport ChartDetails from \"./ChartDetails\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  //need helper functions to parse data & determine chart type\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      width: 0,\n      height: 0,\n      data: props\n    };\n    _this.createBarChart = _this.createBarChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createBarChart();\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.createBarChart();\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      this.setState({\n        width: document.getElementById('chart').clientWidth,\n        //get width from container\n        height: document.getElementById('chart').clientHeight\n      });\n    }\n  }, {\n    key: \"createBarChart\",\n    value: function createBarChart() {\n      d3.selectAll(\"svg > *\").remove(); //clear previous chart\n\n      var node = this.node;\n      var dataObj = this.props.data; //enable when using api\n\n      var valuesMap = dataObj.map(function (d, i) {\n        return +d.value + i / 10000;\n      }); //get an array of data called valuesMap... i/10000 is a workaround to the unique values issue\n\n      var freqMap = dataObj.map(function (d) {\n        var months = new Array(12);\n        months[0] = \"January\";\n        months[1] = \"February\";\n        months[2] = \"March\";\n        months[3] = \"April\";\n        months[4] = \"May\";\n        months[5] = \"June\";\n        months[6] = \"July\";\n        months[7] = \"August\";\n        months[8] = \"September\";\n        months[9] = \"October\";\n        months[10] = \"November\";\n        months[11] = \"December\";\n        return new Date(d.year, months.indexOf(d.periodName));\n      });\n      valuesMap.reverse(); //fix data series from BLS so chart reads left to right\n\n      freqMap.reverse(); //fix data series from BLS\n      // const dataMax = d3.max(dataObj, (d) => { return d.value })\n      // const dataMin = d3.min(dataObj, (d) => { return d.value })\n\n      var dataMax = d3.max(valuesMap);\n      var dataMin = d3.min(valuesMap); //parameters\n\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 40\n      };\n      var height = this.state.height - margin.top - margin.bottom;\n      var width = this.state.width - margin.left - margin.right;\n      var barWidth = 30;\n      var barOffset = 5;\n      var indices = d3.range(0, freqMap.length); //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n      // percent change charts\n\n      var yScale = d3.scaleLinear().domain([dataMin - dataMin * .1, dataMax]).range([0, height]);\n      var yAxisValues = d3.scaleLinear().domain([dataMin, dataMax]).range([height, 0]); //need to reverse to correct scale drawing\n\n      var yAxisTicks = d3.axisLeft(yAxisValues).ticks(20);\n      var xScaleBand = d3.scaleBand().domain(valuesMap).padding(.1).range([0, width]); // const xScale = d3.scaleOrdinal()\n      //     .domain(valuesMap)\n      //     .range([0,freqMap.length])\n\n      var xAxisValues = d3.scaleTime() // .domain([freqMap[0],freqMap[freqMap.length-1]])\n      .domain([freqMap[0], freqMap[freqMap.length - 1]]).range([0, width]);\n      var xAxisTicks = d3.axisBottom(xAxisValues).ticks(width <= 400 ? 4 : 12); //dynamically change #ticks based on size\n      //dynamically change bar colors based on size\n\n      var colors = d3.scaleLinear().domain([dataMin, dataMax]).range(['#341C1C', '#ADFCF9']); //*****\n      // const x_axis = d3.axisBottom()\n      //     .scale(yScale)\n      //     .append(\"rect\")\n\n      var myChart = d3.select(node).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').selectAll('rect').data(valuesMap).enter().append('rect').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.right, \")\")).attr(\"fill\", function (d) {\n        return colors(d);\n      }).attr(\"width\", function (d) {\n        return xScaleBand.bandwidth();\n      }) // calculate width of each bar\n      // .attr('height', 0)\n      .attr(\"height\", function (d) {\n        return yScale(d);\n      }).attr(\"x\", function (d, i) {\n        return xScaleBand(d);\n      }) //spread bars out using width and offset\n      // .attr('x', ((d,i) => xScale(i)))\n      .attr('y', height).attr('class', 'bar'); //.attr(\"y\", d => height - yScale(d)) //position bars at bottom  \n\n      var yGuide = d3.select(node).append('g').attr('transform', 'translate(40,20)').call(yAxisTicks);\n      var xGuide = d3.select(node).append('g').attr('transform', \"translate(40,\".concat(height + 20, \")\")).call(xAxisTicks);\n      myChart.transition().attr(\"height\", function (d) {\n        return yScale(d);\n      }).attr(\"y\", function (d) {\n        return height - yScale(d);\n      }).delay(function (d, i) {\n        return i * 10;\n      }).duration(1000).ease(d3.easeBackInOut);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var infoObj = this.props.location.state.button;\n      return React.createElement(\"div\", {\n        className: \"chart-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, infoObj.title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, infoObj.subtitle), React.createElement(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"yAxis-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, infoObj.yScaleName), React.createElement(\"svg\", {\n        ref: function ref(node) {\n          return _this2.node = node;\n        },\n        width: this.state.width,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      })), React.createElement(ChartDetails, {\n        props: this.state.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default withChartContext(Chart);","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/Chart.js"],"names":["React","Component","d3","withChartContext","ChartDetails","Chart","props","state","width","height","data","createBarChart","bind","updateWindowDimensions","window","addEventListener","setState","document","getElementById","clientWidth","clientHeight","selectAll","remove","node","dataObj","valuesMap","map","d","i","value","freqMap","months","Array","Date","year","indexOf","periodName","reverse","dataMax","max","dataMin","min","margin","top","right","bottom","left","barWidth","barOffset","indices","range","length","yScale","scaleLinear","domain","yAxisValues","yAxisTicks","axisLeft","ticks","xScaleBand","scaleBand","padding","xAxisValues","scaleTime","xAxisTicks","axisBottom","colors","myChart","select","attr","append","enter","bandwidth","yGuide","call","xGuide","transition","delay","duration","ease","easeBackInOut","infoObj","location","button","title","subtitle","yScaleName"],"mappings":"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","sourcesContent":[" import React, { Component } from 'react'\n\nimport * as d3 from \"d3\"\n\nimport { withChartContext } from \"./DataProvider\"\nimport ChartDetails from \"./ChartDetails\"\n\n\nclass Chart extends Component {\n    //need helper functions to parse data & determine chart type\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0, data:props }\n        this.createBarChart = this.createBarChart.bind(this)\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\n    }\n\n    componentDidMount() {\n        this.createBarChart()\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions)\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n\n    updateWindowDimensions() {\n        this.setState({\n            width: document.getElementById('chart').clientWidth, //get width from container\n            height: document.getElementById('chart').clientHeight\n        })\n    }\n    createBarChart() {\n        d3.selectAll(`svg > *`).remove() //clear previous chart\n        \n        const node = this.node\n\n        const dataObj = this.props.data //enable when using api\n\n        const valuesMap = dataObj.map((d, i )=> (+d.value)+(i/10000)) //get an array of data called valuesMap... i/10000 is a workaround to the unique values issue\n       \n        const freqMap = dataObj.map(d => \n            {\n                var months = new Array(12);\n                    months[0] = \"January\";\n                    months[1] = \"February\";\n                    months[2] = \"March\";\n                    months[3] = \"April\";\n                    months[4] = \"May\";\n                    months[5] = \"June\";\n                    months[6] = \"July\";\n                    months[7] = \"August\";\n                    months[8] = \"September\";\n                    months[9] = \"October\";\n                    months[10] = \"November\";\n                    months[11] = \"December\";\n                return new Date(d.year, months.indexOf(d.periodName))\n            })\n        \n        valuesMap.reverse() //fix data series from BLS so chart reads left to right\n        freqMap.reverse() //fix data series from BLS\n        // const dataMax = d3.max(dataObj, (d) => { return d.value })\n        // const dataMin = d3.min(dataObj, (d) => { return d.value })\n        const dataMax = d3.max(valuesMap)\n        const dataMin = d3.min(valuesMap)\n        //parameters\n        const margin = {top: 20, right: 20, bottom: 20, left: 40}\n        const height = this.state.height - margin.top - margin.bottom\n        const width = this.state.width - margin.left - margin.right\n        \n        const barWidth = 30\n        const barOffset = 5\n        const indices = d3.range(0,freqMap.length)\n        \n        //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n        // percent change charts\n        const yScale = d3.scaleLinear()\n            .domain([(dataMin-(dataMin*.1)), dataMax])\n            .range([0, height])\n\n        const yAxisValues = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range([height,0]) //need to reverse to correct scale drawing\n\n        const yAxisTicks = d3.axisLeft(yAxisValues)\n            .ticks(20)\n\n        const xScaleBand = d3.scaleBand()\n            .domain(valuesMap)\n            .padding(.1)\n            .range([0, width])\n        \n        // const xScale = d3.scaleOrdinal()\n        //     .domain(valuesMap)\n        //     .range([0,freqMap.length])\n\n        const xAxisValues = d3.scaleTime()\n            // .domain([freqMap[0],freqMap[freqMap.length-1]])\n            .domain([freqMap[0], freqMap[freqMap.length-1]])\n            .range([0, width])\n\n        const xAxisTicks = d3.axisBottom(xAxisValues)\n            .ticks(width <= 400 ? 4 : 12) //dynamically change #ticks based on size\n    \n        //dynamically change bar colors based on size\n        const colors = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range(['#341C1C', '#ADFCF9'])\n\n        //*****\n        // const x_axis = d3.axisBottom()\n        //     .scale(yScale)\n        //     .append(\"rect\")\n\n        \n\n        const myChart = d3.select(node)\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            \n            .append('g')\n            \n          .selectAll('rect')\n            .data(valuesMap)\n          .enter().append('rect')\n          \n           \n\n            .attr('transform', `translate(${margin.left},${margin.right})`)\n       \n            .attr(\"fill\", (d) => colors(d))\n            .attr(\"width\", (d) => xScaleBand.bandwidth()) // calculate width of each bar\n            // .attr('height', 0)\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"x\", (d,i) => xScaleBand(d)) //spread bars out using width and offset\n            // .attr('x', ((d,i) => xScale(i)))\n            .attr('y', height)\n            .attr('class', 'bar')\n            //.attr(\"y\", d => height - yScale(d)) //position bars at bottom  \n\n        const yGuide = d3.select(node).append('g')\n            .attr('transform', 'translate(40,20)')\n            .call(yAxisTicks)\n            \n\n        const xGuide = d3.select(node).append('g')\n            .attr('transform', `translate(40,${height + 20})`)\n            .call(xAxisTicks)\n            \n\n        myChart.transition()\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"y\", d => height - yScale(d))\n            .delay((d, i) => i * 10)\n            .duration(1000)\n            .ease(d3.easeBackInOut)\n           \n    }\n\n    render() {\n\n        const infoObj = this.props.location.state.button\n\n        return (\n                <div className=\"chart-wrapper\">\n                    <h3>{infoObj.title}</h3>\n                    <h5>{infoObj.subtitle}</h5>\n                    <div className=\"chart\" id=\"chart\">\n                        <h6 className=\"yAxis-title\">{infoObj.yScaleName}</h6>\n                        <svg ref={node => this.node = node} width={this.state.width} height={this.state.height}></svg>\n                    </div>\n                <ChartDetails props={this.state.data}/>\n            </div>\n\n        )\n    }\n}\n\nexport default withChartContext(Chart)\n"]},"metadata":{},"sourceType":"module"}