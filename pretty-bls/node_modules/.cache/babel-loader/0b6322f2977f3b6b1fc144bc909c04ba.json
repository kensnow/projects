{"ast":null,"code":"import _objectWithoutProperties from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/ken/dev/projects/pretty-bls/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/ken/dev/projects/pretty-bls/src/Chart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from \"d3\";\nimport { withChartContext } from \"./DataProvider\";\nimport ChartDetails from \"./ChartDetails\";\n\nvar Chart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Chart, _Component);\n\n  //need helper functions to parse data & determine chart type\n  function Chart(props) {\n    var _this;\n\n    _classCallCheck(this, Chart);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Chart).call(this, props));\n    _this.state = {\n      width: 0,\n      height: 0,\n      data: props\n    };\n    _this.createBarChart = _this.createBarChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.updateWindowDimensions = _this.updateWindowDimensions.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Chart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.createBarChart();\n      this.updateWindowDimensions();\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.createBarChart();\n    }\n  }, {\n    key: \"updateWindowDimensions\",\n    value: function updateWindowDimensions() {\n      this.setState({\n        width: document.getElementById('chart').clientWidth,\n        //get width from container\n        height: document.getElementById('chart').clientHeight\n      });\n    }\n  }, {\n    key: \"createBarChart\",\n    value: function createBarChart() {\n      d3.selectAll(\"svg > *\").remove(); //clear previous chart\n\n      var node = this.node;\n      var dataObj = this.props.data; //enable when using api\n      //  const valuesMap = dataObj.map((d, i )=> (+d.value)+(i/10000)) //get an array of data called valuesMap... i/10000 is a workaround to the unique values issue\n\n      var valuesMap = dataObj.map(function (d) {\n        return +d.value;\n      });\n      var freqMap = dataObj.map(function (d) {\n        var months = new Array(12);\n        months[0] = \"January\";\n        months[1] = \"February\";\n        months[2] = \"March\";\n        months[3] = \"April\";\n        months[4] = \"May\";\n        months[5] = \"June\";\n        months[6] = \"July\";\n        months[7] = \"August\";\n        months[8] = \"September\";\n        months[9] = \"October\";\n        months[10] = \"November\";\n        months[11] = \"December\";\n        return new Date(d.year, months.indexOf(d.periodName));\n      });\n      valuesMap.reverse(); //fix data series from BLS so chart reads left to right\n\n      freqMap.reverse(); //fix data series from BLS\n\n      var dataMax = d3.max(valuesMap);\n      var dataMin = d3.min(valuesMap); //parameters\n\n      var margin = {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 50\n      };\n      var height = this.state.height - margin.top - margin.bottom;\n      var width = this.state.width - margin.left - margin.right; //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n      // percent change charts\n\n      var yScale = d3.scaleLinear().domain([dataMin - dataMin * .02, dataMax + dataMax * .02]) //lift floor of data off 2%\n      .range([0, height]);\n      var yAxisValues = d3.scaleLinear().domain([dataMin - dataMin * .02, dataMax + dataMax * .02]).range([height, 0]); //need to reverse to correct scale drawing\n\n      var yAxisTicks = d3.axisLeft(yAxisValues).ticks(20);\n      var xScaleBand = d3.scaleBand().domain(valuesMap).padding(.1).range([0, width]);\n      var xAxisValues = d3.scaleTime().domain([freqMap[0], freqMap[freqMap.length - 1]]).range([0, width]);\n      var xAxisTicks = d3.axisBottom(xAxisValues).ticks(width <= 400 ? 4 : 12); //dynamically change #ticks based on size\n      //dynamically change bar colors based on size\n\n      var colors = d3.scaleLinear().domain([dataMin, dataMax]).range(['#341C1C', '#ADFCF9']);\n      var myChart = d3.select(node).attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').selectAll('rect').data(valuesMap).enter().append('rect').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.right, \")\")).attr(\"fill\", function (d) {\n        return colors(d);\n      }).attr(\"width\", function (d) {\n        return xScaleBand.bandwidth();\n      }) // calculate width of each bar\n      .attr(\"height\", function (d) {\n        return yScale(d);\n      }).attr(\"x\", function (d, i) {\n        return xScaleBand(i);\n      }) //spread bars out using width and offset\n      .attr('y', height).attr('class', 'bar');\n      var yGuide = d3.select(node).append('g').attr('transform', 'translate(50,20)').call(yAxisTicks);\n      var xGuide = d3.select(node).append('g').attr('transform', \"translate(50,\".concat(height + 20, \")\")).call(xAxisTicks);\n      myChart.transition().attr(\"height\", function (d) {\n        return yScale(d);\n      }).attr(\"y\", function (d) {\n        return height - yScale(d);\n      }).delay(function (d, i) {\n        return i * 10;\n      }).duration(1000).ease(d3.easeBackInOut);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props$location$ = this.props.location.state.button,\n          title = _this$props$location$.title,\n          subtitle = _this$props$location$.subtitle,\n          yScaleName = _this$props$location$.yScaleName,\n          description = _this$props$location$.description,\n          series_id = _this$props$location$.series_id,\n          props = _objectWithoutProperties(_this$props$location$, [\"title\", \"subtitle\", \"yScaleName\", \"description\", \"series_id\"]);\n\n      return React.createElement(\"div\", {\n        className: \"chart-wrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, title), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, subtitle), React.createElement(\"div\", {\n        className: \"time-button-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"time-button 3-year\",\n        onClick: function onClick() {\n          _this2.props.getDataInfo(series_id, 3);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"3 Years\"), React.createElement(\"button\", {\n        className: \"time-button 10-year\",\n        onClick: function onClick() {\n          _this2.props.getDataInfo(series_id, 10);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"10 years\"), React.createElement(\"button\", {\n        className: \"time-button 20-year\",\n        onClick: function onClick() {\n          _this2.props.getDataInfo(series_id, 20);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"20 years\")), React.createElement(\"div\", {\n        className: \"chart\",\n        id: \"chart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        className: \"yAxis-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, yScaleName), React.createElement(\"svg\", {\n        ref: function ref(node) {\n          return _this2.node = node;\n        },\n        width: this.state.width,\n        height: this.state.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })), React.createElement(ChartDetails, {\n        title: title,\n        subtitle: subtitle,\n        description: description,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Chart;\n}(Component);\n\nexport default withChartContext(Chart);","map":{"version":3,"sources":["/home/ken/dev/projects/pretty-bls/src/Chart.js"],"names":["React","Component","d3","withChartContext","ChartDetails","Chart","props","state","width","height","data","createBarChart","bind","updateWindowDimensions","window","addEventListener","setState","document","getElementById","clientWidth","clientHeight","selectAll","remove","node","dataObj","valuesMap","map","d","value","freqMap","months","Array","Date","year","indexOf","periodName","reverse","dataMax","max","dataMin","min","margin","top","right","bottom","left","yScale","scaleLinear","domain","range","yAxisValues","yAxisTicks","axisLeft","ticks","xScaleBand","scaleBand","padding","xAxisValues","scaleTime","length","xAxisTicks","axisBottom","colors","myChart","select","attr","append","enter","bandwidth","i","yGuide","call","xGuide","transition","delay","duration","ease","easeBackInOut","location","button","title","subtitle","yScaleName","description","series_id","getDataInfo"],"mappings":"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","sourcesContent":[" import React, { Component } from 'react'\n\nimport * as d3 from \"d3\"\n\nimport { withChartContext } from \"./DataProvider\"\nimport ChartDetails from \"./ChartDetails\"\n\n\nclass Chart extends Component {\n    //need helper functions to parse data & determine chart type\n    constructor(props) {\n        super(props);\n        this.state = { width: 0, height: 0, data:props }\n        this.createBarChart = this.createBarChart.bind(this)\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this)\n    }\n\n    componentDidMount() {\n        this.createBarChart()\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions)\n    }\n    componentDidUpdate() {\n        this.createBarChart()\n    }\n\n    updateWindowDimensions() {\n        this.setState({\n            width: document.getElementById('chart').clientWidth, //get width from container\n            height: document.getElementById('chart').clientHeight\n        })\n    }\n    createBarChart() {\n        d3.selectAll(`svg > *`).remove() //clear previous chart\n        \n        const node = this.node\n        const dataObj = this.props.data //enable when using api\n\n        //  const valuesMap = dataObj.map((d, i )=> (+d.value)+(i/10000)) //get an array of data called valuesMap... i/10000 is a workaround to the unique values issue\n       const valuesMap = dataObj.map((d )=> (+d.value)) \n\n        const freqMap = dataObj.map(d => \n            {\n                var months = new Array(12);\n                    months[0] = \"January\";\n                    months[1] = \"February\";\n                    months[2] = \"March\";\n                    months[3] = \"April\";\n                    months[4] = \"May\";\n                    months[5] = \"June\";\n                    months[6] = \"July\";\n                    months[7] = \"August\";\n                    months[8] = \"September\";\n                    months[9] = \"October\";\n                    months[10] = \"November\";\n                    months[11] = \"December\";\n                return new Date(d.year, months.indexOf(d.periodName))\n            })\n        \n        valuesMap.reverse() //fix data series from BLS so chart reads left to right\n        freqMap.reverse() //fix data series from BLS\n\n        const dataMax = d3.max(valuesMap)\n        const dataMin = d3.min(valuesMap)\n        //parameters\n        const margin = {top: 20, right: 20, bottom: 20, left: 50}\n        const height = this.state.height - margin.top - margin.bottom\n        const width = this.state.width - margin.left - margin.right\n        \n        //set up scales to chart fills correctly, use linear for percent charts (0-100) and\n        // percent change charts\n            \n\n        const yScale = d3.scaleLinear()\n            .domain([dataMin - (dataMin *.02), dataMax +(dataMax * .02)]) //lift floor of data off 2%\n            .range([0, height])\n\n        const yAxisValues = d3.scaleLinear()\n            .domain([dataMin - (dataMin *.02), dataMax +(dataMax * .02)])\n            .range([height,0]) //need to reverse to correct scale drawing\n\n        const yAxisTicks = d3.axisLeft(yAxisValues)\n            .ticks(20)\n\n        const xScaleBand = d3.scaleBand()\n            .domain(valuesMap)\n            .padding(.1)\n            .range([0, width])\n\n        const xAxisValues = d3.scaleTime()\n            .domain([freqMap[0], freqMap[freqMap.length-1]])\n            .range([0, width])\n\n        const xAxisTicks = d3.axisBottom(xAxisValues)\n            .ticks(width <= 400 ? 4 : 12) //dynamically change #ticks based on size\n    \n        //dynamically change bar colors based on size\n        const colors = d3.scaleLinear()\n            .domain([dataMin, dataMax])\n            .range(['#341C1C', '#ADFCF9'])\n\n        const myChart = d3.select(node)\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .selectAll('rect')\n            .data(valuesMap)\n          .enter()\n          .append('rect')\n          \n            .attr('transform', `translate(${margin.left},${margin.right})`)\n       \n            .attr(\"fill\", (d) => colors(d))\n            .attr(\"width\", (d) => xScaleBand.bandwidth()) // calculate width of each bar\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"x\", (d,i) => xScaleBand(i)) //spread bars out using width and offset\n\n            .attr('y', height)\n            .attr('class', 'bar')\n\n        const yGuide = d3.select(node).append('g')\n            .attr('transform', 'translate(50,20)')\n            .call(yAxisTicks)\n            \n\n        const xGuide = d3.select(node).append('g')\n            .attr('transform', `translate(50,${height + 20})`)\n            .call(xAxisTicks)\n            \n\n        myChart.transition()\n            .attr(\"height\", (d) => yScale(d))\n            .attr(\"y\", d => height - yScale(d))\n            .delay((d, i) => i * 10)\n            .duration(1000)\n            .ease(d3.easeBackInOut)\n           \n    }\n\n    render() {\n\n        const {title, subtitle, yScaleName, description, series_id, ...props} = this.props.location.state.button\n\n        return (\n            <div className=\"chart-wrapper\">\n                <h3>{title}</h3>\n                <h5>{subtitle}</h5>\n                <div className=\"time-button-container\">\n                <button className=\"time-button 3-year\" onClick={() => { this.props.getDataInfo(series_id, 3) }} >3 Years</button>\n                <button className=\"time-button 10-year\" onClick={() => { this.props.getDataInfo(series_id, 10) }}>10 years</button>\n                <button className=\"time-button 20-year\" onClick={() => { this.props.getDataInfo(series_id, 20) }}>20 years</button>\n                </div>\n                <div className=\"chart\" id=\"chart\">\n                    <h6 className=\"yAxis-title\">{yScaleName}</h6>\n                    <svg ref={node => this.node = node} width={this.state.width} height={this.state.height}></svg>\n                </div>\n\n                <ChartDetails title={title} subtitle={subtitle} description={description} />\n            </div>\n\n        )\n    }\n}\n\nexport default withChartContext(Chart)\n"]},"metadata":{},"sourceType":"module"}